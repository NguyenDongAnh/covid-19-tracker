{"version":3,"sources":["assets/image/world.png","services.js","fetchAPI.js","views/Nav.js","views/Pagination.js","views/TableStatisticsCountry.js","views/TableSummary.js","views/TableStatisticsWorld.js","views/TopCountriesMenu.js","views/Counter.js","reportWebVitals.js","index.js","layout/App.js"],"names":["numberWithCommas","x","toString","replace","getSmallCountryFlag","code","formatDateTime","date","Date","getMonth","getDate","getFullYear","getDaysRange","days","d","from_d","getTime","to_date","start_date","end_date","renderConfirmedCountry","data","dataCase","map","element","push","Confirmed","renderRecoveredCountry","Recovered","renderDeathsCountry","Deaths","renderConfirmedWorld","TotalConfirmed","renderRecoveredWorld","TotalRecovered","renderDeathsWorld","TotalDeaths","renderLabels","labels","sortDate","c","sort","a","b","getData","url","config","method","baseURL","axios","then","response","Promise","resolve","catch","error","reject","getDataSummary","getDataWorldAllTimeCases","getDataDayOneAllStatus","country","end_point","getWorldDay","getCountryDay","Nav","setDefault","className","href","onClick","Pagination","currentTable","rowsPerTable","totalRows","onChangeTable","pageNumbers","totalTable","Math","ceil","i","event","preventDefault","number","TableStatisticsCountry","source","dataCountry","useState","setCurrentTable","indexOfLastRow","indextOfFirstRow","currentDataCountry","slice","useEffect","row","index","Active","length","TableSummary","countrySummaryList","id","Slug","src","alt","Country","NewConfirmed","NewRecovered","NewDeaths","ID","TableStatisticsWorld","world","currentDataWorld","TopCountriesMenu","Counter","time","setTime","setInterval","clearInterval","CountryCode","getHours","getMinutes","getSeconds","formatTime","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","exact","path","component","summary","setSummary","setCountrySummaryList","setCountry","setWorld","world7Days","setWorld7Days","world30Days","setWorld30Days","setDataCountry","dataCountry7Days","setDataCountry7Days","dataCountry30Days","setDataCountry30Days","loading","setLoading","startLoading","endLoading","ratingChart","series","Object","keys","options","chart","type","legend","position","colors","allTimeChart","xaxis","categories","show","grid","name","last30DaysChart","last7DaysChart","fectchDataDefault","Countries","dataCountries","e","toLowerCase","Global","console","log","document","title","worldImg","width","height","frameBorder","allow","allowFullScreen","style","marginTop","getElementById"],"mappings":"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","file":"static/js/main.e3435dad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/world.5322216a.png\";","const numberWithCommas = (x) => {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n}\r\nconst getSmallCountryFlag = (code) => {\r\n    return `https://www.countryflags.io/${code}/flat/32.png`\r\n}\r\nconst getMediumCountryFlag = (code) => {\r\n    return `https://www.countryflags.io/${code}/flat/64.png`\r\n}\r\n\r\nconst formatDateTime = (date) => {\r\n    date = new Date(date)\r\n    if (date.getMonth() + 1 < 10)\r\n        return \"0\" + (date.getMonth() + 1) + \"/\" + (date.getDate()) + \"/\" + (date.getFullYear());\r\n    return (date.getMonth() + 1) + \"/\" + (date.getDate()) + \"/\" + (date.getFullYear());\r\n}\r\n\r\nconst getDaysRange = (days) => {\r\n    let d = new Date()\r\n\r\n    let from_d = new Date(d.getTime() - (days * 24 * 60 * 60 * 1000))\r\n\r\n    let to_date = `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\r\n\r\n    let from_date = `${from_d.getFullYear()}-${from_d.getMonth() + 1}-${from_d.getDate()}`\r\n\r\n    return {\r\n        start_date: from_date,\r\n        end_date: to_date\r\n    }\r\n}\r\n\r\nconst renderConfirmedCountry = (data) => {\r\n    let dataCase = [];\r\n    data.map(element => {\r\n        dataCase.push(element.Confirmed);\r\n    })\r\n    return dataCase;\r\n}\r\nconst renderRecoveredCountry = (data) => {\r\n    let dataCase = [];\r\n    data.map(element => dataCase.push(element.Recovered))\r\n    return dataCase;\r\n}\r\nconst renderDeathsCountry = (data) => {\r\n    let dataCase = [];\r\n    data.map(element => dataCase.push(element.Deaths))\r\n    return dataCase\r\n}\r\nconst renderConfirmedWorld = (data) => {\r\n    let dataCase = [];\r\n    data.map(element => {\r\n        dataCase.push(element.TotalConfirmed);\r\n    })\r\n    return dataCase;\r\n}\r\nconst renderRecoveredWorld = (data) => {\r\n    let dataCase = [];\r\n    data.map(element => {\r\n        dataCase.push(element.TotalRecovered);\r\n    })\r\n    return dataCase;\r\n}\r\nconst renderDeathsWorld = (data) => {\r\n    let dataCase = [];\r\n    data.map(element => {\r\n        dataCase.push(element.TotalDeaths);\r\n    })\r\n    return dataCase\r\n}\r\n\r\nconst renderLabels = (data) => {\r\n    let labels = [];\r\n    data.map(element => {\r\n        labels.push(formatDateTime(new Date(element.Date)));\r\n    })\r\n    return labels\r\n}\r\nfunction sortDate(c) {\r\n    let k = [...c];\r\n    return k.sort((a, b) => a.Date > b.Date ? 1 : -1)\r\n}\r\nfunction sortConfirmed(c) {\r\n    let k = [...c];\r\n    return k.sort((a, b) => a.TotalConfirmed < b.TotalConfirmed ? 1 : -1)\r\n}\r\nexport{\r\n    numberWithCommas,\r\n    getSmallCountryFlag,\r\n    getMediumCountryFlag,\r\n    formatDateTime,\r\n    getDaysRange,\r\n    renderConfirmedCountry,\r\n    renderRecoveredCountry,\r\n    renderDeathsCountry,\r\n    renderConfirmedWorld,\r\n    renderRecoveredWorld,\r\n    renderDeathsWorld,\r\n    renderLabels,\r\n    sortDate,\r\n    sortConfirmed\r\n}","import axios from 'axios'\r\nimport { getDaysRange } from './services'\r\nconst getData = (url) => {\r\n    let config = {\r\n        method: 'get',\r\n        baseURL: 'https://api.covid19api.com/',\r\n        url: url\r\n    }\r\n    return axios(config).then(response => Promise.resolve(response.data)\r\n    ).catch(error => Promise.reject(error))\r\n\r\n}\r\n\r\nconst getDataDefault = () => {\r\n    let end_point = ''\r\n    return getData(end_point)\r\n}\r\nconst getDataSummary = () => {\r\n    let end_point = 'summary'\r\n    return getData(end_point)\r\n}\r\nconst getDataWorldAllTimeCases = () => {\r\n    let end_point = 'world'\r\n    return getData(end_point)\r\n}\r\n\r\nconst getDataCountries = () => {\r\n    let end_point = 'countries'\r\n    return getData(end_point)\r\n}\r\nconst getDataDayOne = (country, status) => {\r\n    let end_point = `dayone/country/${country}/status/${status}`\r\n    return getData(end_point);\r\n}\r\nconst getDataDayOneAllStatus = (country) => {\r\n    let end_point = `dayone/country/${country}`\r\n    return getData(end_point);\r\n}\r\nconst getDataDayOneLive = (country) => {\r\n    let end_point = `dayone/country/${country}/status/confirmed/live`\r\n    return getData(end_point);\r\n}\r\nconst getDataDayOneTotal = (country, status) => {\r\n    let end_point = `total/dayone/country/${country}/status/${status}`\r\n    return getData(end_point);\r\n}\r\nconst getDataDayOneTotalAllStatus = (country) => {\r\n    let end_point = `total/dayone/country/${country}`\r\n    return getData(end_point);\r\n}\r\nconst getWorldDay = (days) => {\r\n    let date = getDaysRange(days)\r\n    let end_point = `world?from=${date.start_date}&to=${date.end_date}`\r\n    return getData(end_point);\r\n}\r\nconst getCountryDay = (days,country) => {\r\n    let date = getDaysRange(days)\r\n    let end_point = `country/${country}?from=${date.start_date}&to=${date.end_date}`\r\n    return getData(end_point);\r\n}\r\nexport {\r\n    getDataDefault,\r\n    getDataSummary,\r\n    getDataCountries,\r\n    getDataDayOne,\r\n    getDataDayOneAllStatus,\r\n    getDataDayOneTotal,\r\n    getDataDayOneLive,\r\n    getDataDayOneTotalAllStatus,\r\n    getDataWorldAllTimeCases,\r\n    getWorldDay,\r\n    getCountryDay\r\n}","import React from 'react'\r\n\r\nexport default function Nav({setDefault}) {\r\n    return (\r\n        <nav className=\"f-width\">\r\n            <div className=\"container\">\r\n                <a href=\"#\" onClick={setDefault}>\r\n                    <div className=\"title\">\r\n                        C<i className='bx bxs-virus bx-tada' ></i>VID19 TRACKER\r\n                    </div>\r\n                </a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Pagination({ currentTable, rowsPerTable, totalRows, onChangeTable }) {\r\n    let pageNumbers = [];\r\n    const totalTable = Math.ceil(totalRows / rowsPerTable)\r\n    for (let i = 1; i <= totalTable; i++) {\r\n        pageNumbers.push(i)\r\n    }\r\n\r\n    return (\r\n        <div className=\"pagination\">\r\n            <div className=\"page-item show\">\r\n                <a href=\"#\" onClick={(event) => {\r\n                    event.preventDefault();\r\n                    if (currentTable > 1)\r\n                        onChangeTable(currentTable - 1)\r\n                }}\r\n                    className=\"page-link\">&laquo;</a>\r\n            </div>\r\n            {pageNumbers.map(number => (\r\n                <div key={number} className={`page-item  ${((currentTable - 5) <= number && number < currentTable)|| ((currentTable + 5) >= number && number >= currentTable)? \" show \" : ''}  ${currentTable === number ? \" active \" : ''}`}>\r\n                    <a href=\"#\" onClick={(event) => {\r\n                        event.preventDefault();\r\n                        onChangeTable(number)\r\n                    }}\r\n                        className=\"page-link\">{number}</a>\r\n                </div>\r\n            ))}\r\n            <div className=\"page-item show\">\r\n                <a href=\"#\" onClick={(event) => {\r\n                    event.preventDefault();\r\n                    if (currentTable < totalTable)\r\n                        onChangeTable(currentTable + 1)\r\n                }}\r\n                    className=\"page-link\">&raquo;</a>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {\r\n    numberWithCommas,\r\n    formatDateTime\r\n} from \"../services\"\r\n\r\nimport Pagination from './Pagination'\r\n\r\nexport default function TableStatisticsCountry({ dataCountry}) {\r\n    let [currentTable, setCurrentTable] = useState(1);\r\n    let [rowsPerTable] = useState(15)\r\n\r\n    const indexOfLastRow = currentTable * rowsPerTable;\r\n    const indextOfFirstRow = indexOfLastRow - rowsPerTable;\r\n    const currentDataCountry = dataCountry.slice(indextOfFirstRow, indexOfLastRow)\r\n    const renderTableStatisticsCountry = (source) => {\r\n        return source.map((row, index) => {\r\n            return (\r\n                <tr key={index}>\r\n                    <td>\r\n                        {numberWithCommas(row.Confirmed)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.Recovered)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.Deaths)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.Active)}\r\n                    </td>\r\n                    <td>\r\n                        {formatDateTime(row.Date)}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    const onChangeTable = (number) => {    \r\n        setCurrentTable(number);\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        setCurrentTable(1);\r\n    },[dataCountry])\r\n\r\n    return (\r\n        <div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            Confirmed\r\n                    </th>\r\n                        <th>\r\n                            Recovered\r\n                    </th>\r\n                        <th>\r\n                            Deaths\r\n                    </th>\r\n                        <th>\r\n                            Active\r\n                    </th>\r\n                        <th>\r\n                            Date\r\n                    </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {renderTableStatisticsCountry(currentDataCountry)}\r\n                </tbody>\r\n            </table>\r\n            <Pagination currentTable={currentTable} rowsPerTable={rowsPerTable} totalRows={dataCountry.length} onChangeTable={onChangeTable} />\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport {\r\n    numberWithCommas,\r\n} from \"../services\"\r\nimport Pagination from './Pagination'\r\nexport default function TableSummary({ countrySummaryList }) {\r\n    let [currentTable, setCurrentTable] = useState(1);\r\n    let [rowsPerTable] = useState(15)\r\n\r\n    const indexOfLastRow = currentTable * rowsPerTable;\r\n    const indextOfFirstRow = indexOfLastRow - rowsPerTable;\r\n    const currentDataCountry = countrySummaryList.slice(indextOfFirstRow, indexOfLastRow)\r\n    const renderTableSummary = (source) => {\r\n        return source.map((row) => {\r\n            return (\r\n                <tr key={row.ID} id={row.Slug}>\r\n                    <td>\r\n                        <div>\r\n                            <img src={row.src} alt={row.Country} />\r\n                            {row.Country}\r\n                        </div>\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.NewConfirmed)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.NewRecovered)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.NewDeaths)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.TotalConfirmed)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.TotalRecovered)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.TotalDeaths)}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    const onChangeTable = (number) => {\r\n        setCurrentTable(number);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            Country\r\n                                    </th>\r\n                        <th>\r\n                            New Confirmed\r\n                                    </th>\r\n                        <th>\r\n                            New Recovered\r\n                                    </th>\r\n                        <th>\r\n                            New Deaths\r\n                                    </th>\r\n                        <th>\r\n                            Total Confirmed\r\n                                    </th>\r\n                        <th>\r\n                            Total Recovered\r\n                                    </th>\r\n                        <th>\r\n                            Total Deaths\r\n                                    </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {renderTableSummary(currentDataCountry)}\r\n                </tbody>\r\n            </table>\r\n            <Pagination currentTable={currentTable} rowsPerTable={rowsPerTable} totalRows={countrySummaryList.length} onChangeTable={onChangeTable} />\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport {\r\n    numberWithCommas,\r\n    formatDateTime\r\n} from \"../services\"\r\nimport Pagination from './Pagination'\r\nexport default function TableStatisticsWorld({ world }) {\r\n    let [currentTable, setCurrentTable] = useState(1);\r\n    let [rowsPerTable] = useState(10)\r\n\r\n    const indexOfLastRow = currentTable * rowsPerTable;\r\n    const indextOfFirstRow = indexOfLastRow - rowsPerTable;\r\n    const currentDataWorld = world.slice(indextOfFirstRow, indexOfLastRow)\r\n    const renderTableSummary = (source) => {\r\n        return source.map((row,index) => {\r\n            return (\r\n                <tr key={index} id={row.Slug}>\r\n                    <td>\r\n                        {numberWithCommas(row.NewConfirmed)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.NewRecovered)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.NewDeaths)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.TotalConfirmed)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.TotalRecovered)}\r\n                    </td>\r\n                    <td>\r\n                        {numberWithCommas(row.TotalDeaths)}\r\n                    </td>\r\n                    <td>\r\n                        {formatDateTime(row.Date)}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    const onChangeTable = (number) => {\r\n        setCurrentTable(number);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            New Confirmed\r\n                                    </th>\r\n                        <th>\r\n                            New Recovered\r\n                                    </th>\r\n                        <th>\r\n                            New Deaths\r\n                                    </th>\r\n                        <th>\r\n                            Total Confirmed\r\n                                    </th>\r\n                        <th>\r\n                            Total Recovered\r\n                                    </th>\r\n                        <th>\r\n                            Total Deaths\r\n                                    </th>\r\n                        <th>\r\n                            Date\r\n                                    </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {renderTableSummary(currentDataWorld)}\r\n                </tbody>\r\n            </table>\r\n            <Pagination currentTable={currentTable} rowsPerTable={rowsPerTable} totalRows={world.length} onChangeTable={onChangeTable} />\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {numberWithCommas} from '../services'\r\nexport default function TopCountriesMenu({country}) {\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>\r\n                        Country\r\n                        </th>\r\n                    <th>\r\n                        Total Confirmed\r\n                        </th>\r\n                    <th>\r\n                        Total Recovered\r\n                        </th>\r\n                    <th>\r\n                        Total Deaths\r\n                        </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {country.map(row => {\r\n                    return (\r\n                        <tr key={row.ID} id={row.Slug}>\r\n                            <td>\r\n                                <div>\r\n                                    <img src={row.src} alt={row.Country} />\r\n                                    {row.Country}\r\n                                </div>\r\n                            </td>\r\n                            <td>\r\n                                {numberWithCommas(row.TotalConfirmed)}\r\n                            </td>\r\n                            <td>\r\n                                {numberWithCommas(row.TotalRecovered)}\r\n                            </td>\r\n                            <td>\r\n                                {numberWithCommas(row.TotalDeaths)}\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\"\r\nimport {\r\n    numberWithCommas,\r\n    getMediumCountryFlag,\r\n    formatDateTime\r\n} from \"../services\"\r\n\r\nexport default function Counter({ country }) {\r\n    let [time, setTime] = useState(new Date())\r\n    function formatTime(time) {\r\n        return (time.getHours() < 10 ? \"0\" + time.getHours() : time.getHours()) + \":\" + (time.getMinutes() < 10 ? \"0\" + time.getMinutes() : time.getMinutes()) + \":\" + (time.getSeconds() < 10 ? \"0\" + time.getSeconds() : time.getSeconds())\r\n    }\r\n\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            setTime(new Date());\r\n        }, 1000)\r\n        return () => {\r\n            clearInterval();\r\n        }\r\n    },[])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <div className=\"country\">\r\n                        {country.Country ? <img src={getMediumCountryFlag(country.CountryCode)} alt={country.Country} /> : \"\"}\r\n                        <div className=\"country-name\">{country.Country ? country.Country : \"World\"}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-3 col-md-6 col-sm-12\">\r\n                    <div className=\"box\">\r\n                        <div className=\"counter\">\r\n                            <div className=\"counter-title\">Total Confirmed</div>\r\n                            <div className=\"counter-infor confirmed-text\">\r\n                                <div className=\"icon\">\r\n                                    <i className='bx bxs-virus'></i>\r\n\r\n                                </div>\r\n                                {numberWithCommas(country.TotalConfirmed)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-3 col-md-6 col-sm-12 \">\r\n                    <div className=\"box\">\r\n                        <div className=\"counter\">\r\n                            <div className=\"counter-title\">Total Recovered</div>\r\n                            <div className=\"counter-infor recovered-text\">\r\n                                <div className=\"icon\">\r\n                                    <i className='bx bxs-smile' ></i>\r\n                                </div>\r\n                                {numberWithCommas(country.TotalRecovered)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-3 col-md-6 col-sm-12\">\r\n                    <div className=\"box\">\r\n                        <div className=\"counter\">\r\n                            <div className=\"counter-title\">Total Deaths</div>\r\n                            <div className=\"counter-infor deaths-text\">\r\n                                <div className=\"icon\">\r\n                                    <i className='bx bxs-sad' ></i>\r\n                                </div>\r\n                                {numberWithCommas(country.TotalDeaths)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-3 col-md-6 col-sm-12\">\r\n                    <div className=\"box\">\r\n                        <div className=\"counter\">\r\n                            <div className=\"counter-title\">{formatDateTime(time)}</div>\r\n                            <div className=\"counter-infor deaths-text\">\r\n                                <div className=\"icon\">\r\n                                    <i className='bx bx-time'></i>\r\n                                </div>\r\n                                {formatTime(time)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { BrowserRouter, Route, Link } from 'react-router-dom'\nimport App from './layout/App';\nimport reportWebVitals from './reportWebVitals';\n\n\nfunction home() {\n  return(\n    <Link to=\"/covid-19-tracker\">\n      <button>Redirect</button>\n    </Link>\n  )\n}\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <Route exact path=\"/\" component={App} />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { useEffect, useState } from 'react';\r\nimport \"../assets/css/style.css\"\r\nimport \"../assets/css/grid.css\"\r\nimport worldImg from '../assets/image/world.png'\r\nimport ReactApexChart from \"react-apexcharts\"\r\nimport {\r\n    getDataSummary,\r\n    getDataDayOneAllStatus,\r\n    getDataWorldAllTimeCases,\r\n    getWorldDay,\r\n    getCountryDay\r\n\r\n} from '../fetchAPI';\r\nimport {\r\n    getSmallCountryFlag,\r\n    renderConfirmedCountry,\r\n    renderRecoveredCountry,\r\n    renderDeathsCountry,\r\n    renderConfirmedWorld,\r\n    renderRecoveredWorld,\r\n    renderDeathsWorld,\r\n    renderLabels,\r\n    sortDate,\r\n    sortConfirmed\r\n} from \"../services\"\r\nimport Nav from '../views/Nav';\r\nimport TableStatisticsCountry from '../views/TableStatisticsCountry';\r\nimport TableSummary from '../views/TableSummary';\r\nimport TableStatisticsWorld from '../views/TableStatisticsWorld';\r\nimport TopCountriesMenu from '../views/TopCountriesMenu';\r\nimport Counter from '../views/Counter';\r\n// let renderCount = 0\r\nexport default function App() {\r\n    // renderCount++;\r\n    // console.log(renderCount)\r\n    let [summary, setSummary] = useState({});\r\n    let [countrySummaryList, setCountrySummaryList] = useState([])\r\n    let [country, setCountry] = useState({});\r\n    let [world, setWorld] = useState([])\r\n    let [world7Days, setWorld7Days] = useState([])\r\n    let [world30Days, setWorld30Days] = useState([])\r\n    let [dataCountry, setDataCountry] = useState([]);\r\n    let [dataCountry7Days, setDataCountry7Days] = useState([]);\r\n    let [dataCountry30Days, setDataCountry30Days] = useState([]);\r\n    let [loading, setLoading] = useState(true);\r\n\r\n    const startLoading = () => {\r\n        setLoading(true);\r\n    }\r\n\r\n    const endLoading = () => {\r\n        setLoading(false);\r\n    }\r\n\r\n    const renderCountriesMenu = (source) => {\r\n        return (source.map((row, index) => {\r\n            return (\r\n                <a key={index} href={\"#\" + row.Slug} onClick={async (event) => {\r\n                    event.preventDefault()\r\n                    startLoading()\r\n                    await setCountry(countrySummaryList[index])\r\n\r\n                    await getDataDayOneAllStatus(countrySummaryList[index].Slug)\r\n                        .then(async (response) => {\r\n                            await response.sort((a, b) => a.Date < b.Date ? 1 : -1)\r\n                            setDataCountry(response)\r\n                        }).catch((error) => console.log(error))\r\n\r\n                    await getCountryDay(30, row.CountryCode).then(response => {\r\n                        setDataCountry30Days(response.sort((a, b) => a.Date > b.Date ? 1 : -1))\r\n                    }).catch(error => console.log(error))\r\n\r\n                    await getCountryDay(7, row.CountryCode).then(response => {\r\n                        setDataCountry7Days(response.sort((a, b) => a.Date > b.Date ? 1 : -1))\r\n                    }).catch(error => console.log(error))\r\n\r\n                    endLoading()\r\n                }}>\r\n                    <div>\r\n                        <img src={row.src} alt={row.Country} />\r\n                        {row.Country}\r\n                    </div>\r\n                </a>\r\n            )\r\n        }))\r\n    }\r\n\r\n    const setDefault = (event) => {\r\n        event.preventDefault()\r\n        setCountry({})\r\n        setDataCountry([])\r\n        setDataCountry30Days([])\r\n        setDataCountry7Days([])\r\n    }\r\n\r\n    const ratingChart = {\r\n        series: Object.keys(country).length !== 0 ? [country.TotalConfirmed, country.TotalRecovered, country.TotalDeaths] : Object.keys(summary).length !== 0 ? [summary.TotalConfirmed, summary.TotalRecovered, summary.TotalDeaths] : [10, 10, 10],\r\n        options: {\r\n            chart: {\r\n                type: 'donut'\r\n            },\r\n            labels: ['Confirmed', 'Recovered', 'Deaths'],\r\n            legend: { position: \"bottom\" },\r\n            colors: ['#ff0000', '#008000', '#373c43'],\r\n        },\r\n    }\r\n\r\n    const allTimeChart = {\r\n        options: {\r\n            chart: {\r\n                type: 'line'\r\n            },\r\n            legend: { position: \"bottom\" },\r\n            colors: ['#ff0000', '#008000', '#373c43'],\r\n            xaxis: {\r\n                categories: dataCountry.length !== 0 ? renderLabels(dataCountry) : world.length !== 0 ? renderLabels(world) : [],\r\n                labels: {\r\n                    show: false\r\n                }\r\n            },\r\n            grid: {\r\n                show: false\r\n            }\r\n        },\r\n        series: [{\r\n            name: 'Confirmed',\r\n            data: dataCountry.length !== 0 ? renderConfirmedCountry(sortDate(dataCountry)) : world.length !== 0 ? renderConfirmedWorld(sortDate(world)) : []\r\n        }, {\r\n            name: 'Recovered',\r\n            data: dataCountry.length !== 0 ? renderRecoveredCountry(sortDate(dataCountry)) : world.length !== 0 ? renderRecoveredWorld(sortDate(world)) : []\r\n        }, {\r\n            name: 'Confirmed',\r\n            data: dataCountry.length !== 0 ? renderDeathsCountry(sortDate(dataCountry)) : world.length !== 0 ? renderDeathsWorld(sortDate(world)) : []\r\n        }]\r\n    }\r\n    const last30DaysChart = {\r\n        options: {\r\n            chart: {\r\n                type: 'line'\r\n            },\r\n            legend: { position: \"bottom\" },\r\n            colors: ['#ff0000', '#008000', '#373c43'],\r\n            xaxis: {\r\n                categories: dataCountry30Days.length !== 0 ? renderLabels(dataCountry30Days) : world.length !== 0 ? renderLabels(world30Days) : [],\r\n                labels: {\r\n                    show: false\r\n                }\r\n            },\r\n            grid: {\r\n                show: false\r\n            }\r\n        },\r\n        series: [{\r\n            name: 'Confirmed',\r\n            data: dataCountry30Days.length !== 0 ? renderConfirmedCountry(dataCountry30Days) : world30Days.length !== 0 ? renderConfirmedWorld(world30Days) : []\r\n        }, {\r\n            name: 'Recovered',\r\n            data: dataCountry30Days.length !== 0 ? renderRecoveredCountry(dataCountry30Days) : world30Days.length !== 0 ? renderRecoveredWorld(world30Days) : []\r\n        }, {\r\n            name: 'Confirmed',\r\n            data: dataCountry30Days.length !== 0 ? renderDeathsCountry(dataCountry30Days) : world30Days.length !== 0 ? renderDeathsWorld(world30Days) : []\r\n        }]\r\n    }\r\n    const last7DaysChart = {\r\n        options: {\r\n            chart: {\r\n                type: 'line'\r\n            },\r\n            legend: { position: \"bottom\" },\r\n            colors: ['#ff0000', '#008000', '#373c43'],\r\n            xaxis: {\r\n                categories: dataCountry7Days.length !== 0 ? renderLabels(dataCountry7Days) : world7Days.length !== 0 ? renderLabels(world7Days) : [],\r\n                labels: {\r\n                    show: false\r\n                }\r\n            },\r\n            grid: {\r\n                show: false\r\n            }\r\n        },\r\n        series: [{\r\n            name: 'Confirmed',\r\n            data: dataCountry7Days.length !== 0 ? renderConfirmedCountry(dataCountry7Days) : world7Days.length !== 0 ? renderConfirmedWorld(world7Days) : []\r\n        }, {\r\n            name: 'Recovered',\r\n            data: dataCountry7Days.length !== 0 ? renderRecoveredCountry(dataCountry7Days) : world7Days.length !== 0 ? renderRecoveredWorld(world7Days) : []\r\n        }, {\r\n            name: 'Confirmed',\r\n            data: dataCountry7Days.length !== 0 ? renderDeathsCountry(dataCountry7Days) : world7Days.length !== 0 ? renderDeathsWorld(world7Days) : []\r\n        }]\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.title = \"Covid 19 Tracker\"\r\n        async function fectchDataDefault() {\r\n            startLoading()\r\n            await getDataSummary().then(async response => {\r\n                let dataCountries = await response.Countries\r\n                dataCountries = await dataCountries.sort((a, b) => a.Country > b.Country ? 1 : -1).map(e => ({ ...e, src: getSmallCountryFlag(e.CountryCode.toLowerCase()) }))\r\n                setCountrySummaryList(dataCountries)\r\n                setSummary(response.Global)\r\n            }).catch(error => console.log(error))\r\n\r\n            await getDataWorldAllTimeCases().then(response => {\r\n                setWorld(response.sort((a, b) => a.Date < b.Date ? 1 : -1));\r\n            }).catch(error => console.log(error))\r\n\r\n            await getWorldDay(30).then(response => {\r\n                setWorld30Days(response.sort((a, b) => a.Date > b.Date ? 1 : -1))\r\n            }).catch(error => console.log(error))\r\n\r\n            await getWorldDay(7).then(response => {\r\n                setWorld7Days(response.sort((a, b) => a.Date > b.Date ? 1 : -1))\r\n            }).catch(error => console.log(error))\r\n\r\n            endLoading()\r\n        }\r\n        fectchDataDefault();\r\n        setInterval(() => {\r\n            fectchDataDefault();\r\n        }, 900000)\r\n        return () => {\r\n            clearInterval()\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={loading ? \"loading\" : ''}>\r\n            <Nav setDefault={setDefault} />\r\n            {Object.keys(country).length !== 0 ? <Counter country={country} /> : (Object.keys(summary).length !== 0 ? <Counter country={summary} /> : '')}\r\n            <div className=\"container f-width\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-8 col-sm-12 m-0\">\r\n                        <div className=\"row m-0\">\r\n                            <div className=\"col-12\">\r\n                                <div className=\"box\">\r\n                                    <div className=\"box-header\">\r\n                                        {Object.keys(country).length === 0 ? \"Summary Statistics of Countries\" : \"Statistics of \" + country.Country}\r\n                                    </div>\r\n                                    <div className=\"box-body\">\r\n                                        {dataCountry.length === 0 ? <TableSummary countrySummaryList={countrySummaryList} /> : <TableStatisticsCountry dataCountry={dataCountry} />}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {dataCountry.length === 0 ?\r\n                                (<div className=\"col-12\">\r\n                                    <div className=\"box\">\r\n                                        <div className=\"box-header\">\r\n                                            Statistics of World\r\n                                    </div>\r\n                                        <div className=\"box-body\">\r\n                                            <TableStatisticsWorld world={world} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>)\r\n                                : ''}\r\n                            <div className=\"col-12\">\r\n                                <div className=\"box\">\r\n                                    <div className=\"box-header\">\r\n                                        Total\r\n                                    </div>\r\n                                    <div className=\"box-body\">\r\n                                        <div className=\"total-char\">\r\n                                            <ReactApexChart options={allTimeChart.options} series={allTimeChart.series} type=\"line\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-6 col-md-12\">\r\n                                <div className=\"box\">\r\n                                    <div className=\"box-header\">\r\n                                        Last 30 days\r\n                                    </div>\r\n                                    <div className=\"box-body\">\r\n                                        <div className=\"total-char\">\r\n                                            <ReactApexChart options={last30DaysChart.options} series={last30DaysChart.series} type=\"line\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-6 col-md-12 \">\r\n                                <div className=\"box\">\r\n                                    <div className=\"box-header\">\r\n                                        Last 7 days\r\n                                    </div>\r\n                                    <div className=\"box-body\">\r\n                                        <div className=\"total-char\">\r\n                                            <ReactApexChart options={last7DaysChart.options} series={last7DaysChart.series} type=\"line\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-4 col-sm-12 p-0\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 p-0\">\r\n                                <div className=\"box\">\r\n                                    <div className=\"box-header\">\r\n                                        Countries\r\n                                    </div>\r\n                                    <div className=\"box-body\">\r\n                                        <div className=\"country-menu\">\r\n                                            <a href=\"#\" onClick={setDefault}>\r\n                                                <img src={worldImg} alt=\"world\" />\r\n                                                <div>World</div>\r\n                                            </a>\r\n                                            {renderCountriesMenu(countrySummaryList)}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 p-0\">\r\n                                <div className=\"box\">\r\n                                    <div className=\"box-header\">\r\n                                        Top Countries Affected\r\n                                    </div>\r\n                                    <div className=\"box-body\">\r\n                                        <TopCountriesMenu country={sortConfirmed(countrySummaryList).slice(0, 6)} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 p-0\">\r\n                                <div className=\"box\">\r\n                                    <div className=\"box-header\">\r\n                                        Rating Chart\r\n                                    </div>\r\n                                    <div className=\"box-body\">\r\n                                        <ReactApexChart options={ratingChart.options} series={ratingChart.series} type=\"donut\" />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 p-0\">\r\n                                <div className=\"box\">\r\n                                    <div className=\"box-header\">\r\n                                        How To Protect yourself\r\n                                    </div>\r\n                                    <div className=\"box-body\">\r\n                                        <iframe\r\n                                            width=\"100%\"\r\n                                            height=\"400px\"\r\n                                            src=\"https://www.youtube.com/embed/6XdjmB4IY3M\"\r\n                                            title=\"YouTube video player\"\r\n                                            frameBorder=\"0\"\r\n                                            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                                            allowFullScreen>\r\n                                        </iframe>\r\n                                        <div className=\"box-header\" style={{ marginTop: \"15px\" }}>\r\n                                            Corona Music\r\n                                        </div>\r\n                                        <div className=\"box-body\">\r\n                                            <iframe width=\"100%\" height=\"400\"\r\n                                                src=\"https://www.youtube.com/embed/BtulL3oArQw\"\r\n                                                title=\"YouTube video player\"\r\n                                                frameBorder=\"0\"\r\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                                                allowFullScreen>\r\n                                            </iframe>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"loader\">\r\n                <i className=\"bx bxs-virus bx-spin\"></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}